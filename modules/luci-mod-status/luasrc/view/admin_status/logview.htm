<%#
 Copyright (c) 2019, Tano Systems. All Rights Reserved.
 Authors: Anton Kikin <a.kikin@tano-systems.com>
-%>

<%+header%>

<style>
	#lv-table .td,
	#lv-table .th {
		min-width: 0;
	}

	#lv-table .td {
		padding: 1px 8px;
	}

	#lv-table .td.lf-ktime {
		      font-size: 90%;
		    font-family: monospace;
		     text-align: right;
		          color: #a0a0a0;
	}

	#lv-table .td.lf-message {
		      font-size: 90%;
		    font-family: monospace;
		  overflow-wrap: break-word;
		      word-wrap: break-word;
		 -ms-word-break: break-all;
		     word-break: break-all;
		     word-break: break-word;
		    -ms-hyphens: auto;
		   -moz-hyphens: auto;
		-webkit-hyphens: auto;
		        hyphens: auto;
	}

	/* alert, crit, panic */
	/* emerg, err, error */
	.lv-p-alert .td, .lv-p-alert.td,
	.lv-p-crit .td, .lv-p-crit.td,
	.lv-p-panic .td, .lv-p-panic.td,
	.lv-p-emerg .td, .lv-p-emerg.td {
		color: #ffca00; /* ORANGE on BLACK */
		background-color: rgba(0, 0, 0, 0.9);
	}

	.lv-p-err .td, .lv-p-err.td,
	.lv-p-error .td, .lv-p-error.td {
		color: #651010; /* RED on RED */
		background-color: rgba(255, 50, 50, 0.4);
	}

	/* warn, warning */
	.lv-p-warn .td, .lv-p-warn.td,
	.lv-p-warning .td, .lv-p-warning.td {
		color: #654f10; /* YELLOW */
		background-color: rgba(255, 171, 50, 0.4);
	}

	/* notice */
	.lv-p-notice .td, .lv-p-notice.td {
		color: #104565; /* BLUE */
		background-color: rgba(50, 172, 255, 0.4);
	}

	/* info, none (default) */

	/* debug */
	.lv-p-debug .td, .lv-p-debug.td {
		color: #a0a0a0; /* GREY */
	}

	#lv-controls { text-align: right !important; padding-bottom: 8px; }
	#lv-controls .lv-controls-left { float: left; }
	#lv-controls select { width: auto; }

	#lv-controls input,
	#lv-controls select,
	#lv-controls label {
		vertical-align: middle;
	}

</style>

<h2 name="content"><%=log.name%></h2>

<div class="cbi-section">
	<legend><%:Controls%></legend>
	<div id="lv-controls">
		<div class="lv-controls-left">
			<label for="lv-sort"><%:Order%>:</label>
			<select id="lv-sort" class="cbi-input-select" onchange="lv_apply_sorting(this.value)">
				<option value="0" selected><%:Descending time (latest on top)%></option>
				<option value="1" ><%:Ascending time (latest on bottom)%></option>
			</select>
		</div>
		<a href="" class="cbi-button cbi-button-apply" id="lv-refresh" onclick="return lv_refresh()">
			<%:Refresh%>
		</a>
		<a href="<%=url("/admin/status/logview/download/" .. log.id .. ".txt")%>" class="cbi-button cbi-button-apply" download="<%=log.id%>.txt">
			<%:Download (TXT)%>
		</a>
		<a href="<%=url("/admin/status/logview/download/" .. log.id .. ".csv")%>" class="cbi-button cbi-button-apply" download="<%=log.id%>.csv">
			<%:Download (CSV)%>
		</a>
	</div>
</div>

<div class="cbi-section">
	<legend><%:Log Entries%></legend>
	<div id="lv-table">
		<p class="spinning"><%:Loading data...%></p>
	</div>
</div>

<script>

	var sorting_mode = 0;

	var header_mapping = {
		"id"        : _("ID"),
		"ktime"     : _("Time"),
		"timestamp" : _("Timestamp"),
		"hostname"  : _("Hostname"),
		"message"   : _("Message"),
		"priority"  : _("Priority"),
		"facility"  : _("Facility"),
		"tag"       : _("Tag")
	}

	function lv_table_create(e, data)
	{
		/* Clear all child elements */
		while (e.firstChild) {
			e.removeChild(e.firstChild);
		}

		/* Make header */
		var tr = E('div', { 'class': 'tr table-titles' })

		for (key in data[0]) {
			tr.appendChild(E('div', { 'class': 'th top left' }, [
				header_mapping.hasOwnProperty(key) ? header_mapping[key] : key
			]))
		}

		var table = E('div', { 'class': 'table-wrapper' }, [
			E('div', { 'class': 'table' }, tr)
		])

		e.appendChild(table)
		return table.lastElementChild
	}

	var priority_mapping = {
		"panic"   : "Panic",
		"emerg"   : "Emergency",
		"crit"    : "Critical",
		"alert"   : "Alert",
		"err"     : "Error",
		"error"   : "Error",
		"warn"    : "Warning",
		"warning" : "Warning",
		"notice"  : "Notice",
		"info"    : "Info",
		"none"    : "Info",
		"debug"   : "Debug",
	}

	function lv_table_add_row(table, data, extra_class)
	{
		var lv_p_class = data.hasOwnProperty('priority')
			? data.priority : 'none';

		var r = E('div', { 'class': 'tr lv-p-' + lv_p_class + ' ' + extra_class }, [])

		for (key in data) {
			var cell_data

			if (key == 'timestamp') {
				var date = new Date(parseInt(data.timestamp) * 1000)

				var ts = '%02d.%02d.%04d %02d:%02d:%02d'.format(
					date.getDate(),
					date.getMonth() + 1,
					date.getFullYear(),
					date.getHours(),
					date.getMinutes(),
					date.getSeconds()
				)

				cell_data = E('nobr', {}, [ ts ])
			}
			else if (key == "priority") {
				cell_data = priority_mapping.hasOwnProperty(data[key])
					? priority_mapping[data[key]] : data[key];
			}
			else {
				cell_data = data[key]
			}

			r.appendChild(E('div', { 'class': 'td top lf-' + key }, [ cell_data ]))
		}

		if (sorting_mode == 0) /* descending time */
			table.insertBefore(r, table.children[1])
		else /* ascending time */
			table.appendChild(r)
	}

	function lv_table_update(lv_table, data)
	{
		if (data && data.length > 0) {
			var t = lv_table_create(lv_table, data);
			var row = 0;

			/* Fill data*/
			data.forEach(function(line) {
				lv_table_add_row(t, line,
					'cbi-rowstyle-' + (1 + ((row++) % 2)))
			})
		} else {
			lv_table.innerHTML =
				'<div class="table">' +
				'<div class="tr table-titles"><div class="th top center"><%:No data to display%></div></div>' +
				'</div></div>';
		}
	}

	function lv_toggle_sorting()
	{
		document.getElementById('lv-sort').setAttribute('disabled', true)

		var t = document.getElementById('lv-table').firstChild.firstChild
		var len = t.children.length

		for (i = 1; i < len / 2; i++)
		{
			var r = t.children[i]
			var old = t.replaceChild(t.children[len - i], r)
			t.insertBefore(old, t.children[len - i - 1].nextSibling)
		}

		document.getElementById('lv-sort').removeAttribute('disabled', true)
	}

	function lv_apply_sorting(mode)
	{
		if (sorting_mode == mode)
			return;

		sorting_mode = mode;
		lv_toggle_sorting();
	}

	function lv_load(log_id, callback)
	{
		new XHR.post('<%=luci.dispatcher.build_url("admin", "status", "logview", "get_json", log.id)%>', { token: '<%=token%>' }, function(x, data) {
			lv_table_update(document.getElementById("lv-table"), data)
			callback()
		});
	}

	function lv_refresh()
	{
		document.getElementById('lv-table').innerHTML = '<p class="spinning"><%:Loading data...%></p>';

		document.getElementById('lv-refresh').setAttribute('disabled', true)
		lv_load('<%=log.id%>', function() {
			document.getElementById('lv-refresh').removeAttribute('disabled', true)
		});
		return false;
	}

	document.addEventListener("DOMContentLoaded", function(event) {
		lv_refresh()
	});
</script>

<%+footer%>
